name: 'Wake'
scopeName: 'source.wake'
type: 'tree-sitter'
parser: 'tree-sitter-wake'

injectionRegex: 'wake|Wake'

fileTypes: [
  'wake'
]

folds: [
  { type: 'block_expression' }
]

scopes:
  '"binary"': 'keyword.control'
  '"data"': 'keyword.control'
  '"def"': 'storage.type.function'
  '"else"': 'keyword.control'
  '"export"': 'storage.modifier'
  '"from"': 'keyword.control'
  '"global"': 'storage.modifier.global'
  '"here"': 'variable.language'
  '"if"': 'keyword.control'
  '"import"': 'storage.modifier'
  '"match"': 'keyword.control'
  '"package"': 'keyword.package'
  '"prim"': 'keyword.control'
  '"publish"': 'keyword.control'
  '"subscribe"': 'keyword.control'
  '"target"': 'keyword.control'
  '"then"': 'keyword.control'
  '"topic"': 'keyword.control'
  '"tuple"': 'keyword.control'
  '"type"': 'keyword.control'
  '"unary"': 'keyword.control'

# Truly special in wake

# "\"		@punctuation.delimiter
# "="		@punctuation.delimiter
# ":"		@punctuation.delimiter
  '"("': 'punctuation.section.parens.begin.bracket.round'
  '")"': 'punctuation.section.parens.end.bracket.round'

  comment: 'comment.block'

  # These definitions intoduce a function
  'definition > low_application_pattern > low_identifier_pattern:nth-child(0)': 'entity.name.function'
  'definition > binary_pattern > *:nth-child(1)': 'entity.name.function'
  'definition > unary_pattern > *:nth-child(0)': 'entity.name.function'
  low_identifier_pattern: 'variable.parameter'

  'tuple > high_identifier_type': 'entity.name.type'
  'tuple > fields > field > high_identifier_pattern': 'entity.name.tag'

  'data > application_type > *:nth-child(0)': 'entity.name.type'
  'data > binary_type > *:nth-child(1)': 'entity.name.type'
  'data > unary_type > *:nth-child(0)': 'entity.name.type'
  'data > high_identifier_type': 'entity.name.type'

  'data > constructors > binary_type > *:nth-child(1)': 'entity.name.function'
  'data > constructors > unary_type > *:nth-child(0)': 'entity.name.function'
  'data > constructors > application_type > *:nth-child(0)': 'entity.name.function'
  'data > constructors > high_identifier_type': 'entity.name.function'

  low_identifier_type: 'support.storage.type'
  high_identifier_type: 'support.storage.type'
  application_type: 'support.storage.type'
  binary_type: 'support.storage.type'
  unary_type: 'support.storage.type'

  integer: 'constant.numeric.integer'
  double: 'constant.numeric.float'
  regexp: 'string.regexp'
  single_string: 'string.quoted.single'
  double_string: 'string.quoted.double'
  interpolation: 'string.interpolated'

# Operators are less interesting than the other properties called out above

  dot_op: 'keyword.operator'
  composition_op: 'keyword.operator'
  unary_fn_op: 'keyword.operator'
  exponent_op: 'keyword.operator'
  muldiv_op: 'keyword.operator'
  addsub_op: 'keyword.operator'
  comparison_op: 'keyword.operator'
  inequality_op: 'keyword.operator'
  and_op: 'keyword.operator'
  or_op: 'keyword.operator'
  currency_op: 'keyword.operator'
  lr_arrow_op: 'keyword.operator'
  bi_arrow_op: 'keyword.operator'
  quantifier_op: 'keyword.operator'
  colon_op: 'keyword.operator'
  comma_op: 'keyword.operator' # @punctuation.delimiter ; not actually special, but people think it is

# stash
#  id: 'constant.variable'
#  boolean_literal: 'constant.language.boolean'
#  string_literal: 'string'
#  'instance_ref_element > id': 'variable.other.object'
#  primary_literal: 'constant.language.boolean'
#  component_type: 'support.storage.type'
#  '"external"': 'storage.modifier'
#  '"->"': 'keyword.operator.member'
#  template: 'keyword.control.directive'
#  'explicit_component_inst > id': 'entity.name.function'
